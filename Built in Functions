### BUILT IN FUNCTIONS ---->>>>

### 1.STRINGS FUNCTIONS=====>>>>>

# STRING VARIABLES ARE IMMUTABLE AND WE CAN NOT CHANGE THEM BY ANY FUNCTIONS WE HAVE TO STORE THEM IN ANOTHER VARIABLE

    # DOT OPERATOR (.)  -->> USED IN STRING VARIABLES TO ADD ANY FUNCTIONS IN IT -->>
# examples---->>>>

# 1.---->>>>
# strn = "Hello There"
# a = strn.upper()
# b= strn.lower()
#
# print(a)
# print(b)

# 2. .index--->>>>

# strn = "HELLO THERE"
#
# print(strn.index("THERE"))
#
# OUTPUT WILL BE 6

# 3. (.center)  --->>> this one will addup some string into a string like
#   string.center(len(string)+50,"+")
# this will add up 25 "+" to right and 25 to right lets have an example---->>>

# strn = "HELLO WORLD"

# print(strn.center(len(strn)+50,'+'))

# OUTPUT == +++++++++++++++++++++++++HELLO WORLD+++++++++++++++++++++++++

# 4. (.replace)  ---->>> this one replace the string elements with other string element

# example ===>>>>>

# strn = "Hello My Name is Shubham Urmaliya"

# print(strn.replace("Shubham Urmaliya","Nimish Pandey",1))
# outuput = "Hello My Name is Nimish Pandey"
# because we write 1 it will replace only one time

# 5. (.count) ---->> it returns how many times the string words are coming in the universal string
# example --->>>

# strn = "HELLO THERE MY NAME IS SHUBHAM AND SHUBHAM"
#
# print(strn.count("SHUBHAM"))
# output = 2
# it will give output 2 because shubham is coming 2 times

# 6. (.startswith & .endswith   function)
#  .startswith give you boolean value which specify wheather the substring is present or not in the strating index in the main string
#  .endswith give you boolean value which specify wheather the substring is present or not in the ending index in the main string
#  example  --->>>>
#
# strn = str(input("Enter Your Email = "))
#
# if  strn.startswith("tripathishubham") == True and strn.endswith("@gmail.com") == True:
#       print("Email IS VALID")
#
# else:
#         print("Not Google Account")
# if you input tripathishubham@gmail.com then  it will give email is valid otherwise it will false

# 7. (.strip) function
# it removes the spaces around the strings here is the example ==>>
#
# strn = "    HELLO   WELCOME   "
#
# print(strn.strip())
#
# output = "HELLO WELCOME"

# __________________________________________________________________________________________

# 2. LIST FUNCTIONS ---->>>>

# 1. (.append)---->>>> this function append any new element in the list
# example--->>>
#
# stm = ["shubham","nimish","rohan"]
# stm.append("rohit")
# print(stm)

# 2. (.clear)----->>> this functions clears all the element from the list
# example--->>>
# #
# stm = ["shubham","nimish","rohan"]
# stm.clear()
# print(stm)

# 3. (.remove)----->> this function removes specific element from the list
# example---->>>
#
# stm = ["Shubham","Nimish","Rohit","Rohan"]
# stm.remove("Rohit")
# print(stm)

# 4. (.pop)------->>> this function if empty removes the last element adn you can add any index number to remove the list item
# example---->>>
#
# stm = ["Shubham","Rohit","Rohan"]
# stm.pop(2)
# print(stm)

# 5. (.sort) ----->>> this will sort the list in alphabatically (order) (if it is a number then it will arrange it in ascending order)

# reverse function along with sort will give reverse alphabatical order
# # example----->>>>
#
# stm=["Shubham","Nimish","Rohit"]
# stm.sort()
# print(stm)
# stm.sort(reverse=True)
# print(stm)

# 6. (.extend)------->> this function add a new list in the previous list
# # example---->>>
#
# stm1 = ["Shubham","Nimish","Rohit"]
# stm2 = [30,40,50]
#
# stm1.extend(stm2)
# print(stm1)

# ---------------------------------------------------------------------------------------
#
# HOW TO MEASURE THE EXCECUTION TIME OF SMALL CODES SNIPPETS IN PYTHON--->>

# First we have to type (timeit) function description
# here we are testing which loop excecution time is better in for loop and while loop..


# from timeit import timeit
#
# def while_loop():
#     i,sum=0,0
#     while i<100:
#           sum=sum+i
#           i=i+1
#
#
# def for_loop():
#     sum=0
#     for i in range(100):
#         sum=sum+i
#
#
# x = timeit(while_loop,number=100)
# y = timeit(for_loop,number=100)
#
# print(x,y)
#
# Output =  0.003251000000000004 0.001336900000000002
#
# this gives that use of for loop is better than while loop
#
#
# here in timeit function we use number=100   which means it will only  calculate the time for 100 times
#     if you leave blank then it will give time for 1 million time iteration
# -------------------------------------------------------------------------------------------------------------------------
